# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Input type for creating a new message"""
input AddMessageJobInput {
  content: String!
  conversationId: ID!
  userId: Float!
}

type AuthPayload {
  access_token: String!
  refresh_token: String!
  user: PickedUser!
}

"""Conversation"""
type Conversation {
  createdAt: DateTime!
  id: ID!
  name: String!
  ownerId: Float!
  updatedAt: DateTime!
}

"""Input type for creating a user"""
input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""HealthCheck"""
type HealthCheck {
  id: ID!
  message: String!
}

input LoginInput {
  email: String!
  password: String!
}

"""Message"""
type Message {
  content: String!
  conversationId: Float!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  updatedAt: DateTime!
  userId: Float!
}

"""Message with user"""
type MessageWithUser {
  content: String!
  conversationId: Float!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  updatedAt: DateTime!
  user: User
  userId: Float!
}

type Mutation {
  addConversation(name: String!): Conversation!
  addMessageJob(data: AddMessageJobInput!): String!
  createUser(data: CreateUserInput!): User!
  deleteConversation(id: Float!): Conversation!
  deleteMessage(id: Float!): Message!
  deleteUser(id: Float!): User!
  editMessageContent(content: String!, id: Float!): Message!
  joinConversation(conversationId: Float!): Conversation!
  login(data: LoginInput!): AuthPayload!
  refreshTokens(refreshToken: String!): AuthPayload!
  updateConversation(id: Float!, name: String!): Conversation!
}

type PickedUser {
  email: String!
  id: Int!
  username: String!
}

type Query {
  conversation(id: Float!): Conversation!
  findConversations(id: Float!): [Conversation!]!
  findMessagesByConversationId(id: Float!): [MessageWithUser!]!
  findOneById(id: Float!): User!
  healthCheck(id: String!): HealthCheck!
  message(id: Float!): Message!
  profile: PickedUser!
}

"""User"""
type User {
  conversations: [Conversation!]
  createdAt: DateTime!
  email: String!
  id: ID!
  password: String!
  updatedAt: DateTime!
  username: String!
}